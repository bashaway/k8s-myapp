from typing import List, Optional
from fastapi import APIRouter, HTTPException
from sqlmodel import  Session
from db import engine
from sqlalchemy import MetaData
import {{ table_name }}.model as model
import {{ table_name }}.crud as crud
import common.model as common_model

router = APIRouter()

table_name = '{{ table_name }}'


# このテーブルのプライマリキーとPythonでの型を決める(Jinja2テンプレート処理)
{% set pkey = namespace() %}
{% for column in meta %}
{% if column.column_primary_key %}
{% set pkey.name =  column.column_name %}
{% if 'CHAR' in column.column_type or 'ENUM' in column.column_type %}
{% set pkey.type = 'str' %}
{% elif 'DECIMAL' in column.column_type %}
{% set pkey.type = 'float' %}
{% else %}
{% set pkey.type = 'int' %}
{% endif %}
#{{ pkey.name }} : {{ pkey.type }}
{% endif %}
{% endfor %}


# メタ情報取得
@router.get("/"+table_name+"/meta", response_model=List[common_model.Meta])
def get_table_columns():
    meta = []

    m = MetaData()
    m.reflect(engine)
    for col in m.tables[table_name].columns:
        meta.append( {
            'column_name': m.tables[table_name].c[col.name].name,
            'column_type': str(m.tables[table_name].c[col.name].type),
            'column_primary_key': m.tables[table_name].c[col.name].primary_key,
            'column_autoincrement': True if (m.tables[table_name].c[col.name].autoincrement == True) else False ,
            'column_nullable': m.tables[table_name].c[col.name].nullable,
        })

    return meta


# レコード数取得
@router.get("/"+table_name+"/count", response_model=common_model.Count)
def get_count(
{% for column in meta %}
    {{ column.column_name }}: Optional[str] = None,
{% endfor %}
):
    with Session(engine) as session:
        return crud.get_count(session,{% for column in meta %}{{ column.column_name }},{% endfor %})


# 特定の１レコード表示
@router.get("/"+table_name+"/{{ '{' }}{{ pkey.name }}{{ '}' }}", response_model=model.{{ table_name }}Read)
def read_{{ table_name }}({{ pkey.name }}: {{ pkey.type }}):
    with Session(engine) as session:
        db_{{ table_name }} = crud.get_{{ table_name }}_by_id(session, {{ pkey.name }})
        if db_{{ table_name }} is None:
            raise HTTPException(status_code=404, detail="id not found")
        return db_{{ table_name }}

# 検索
@router.get("/"+table_name+"/", response_model=List[model.{{ table_name }}Read])
def read_{{ table_name }}(skip: int = 0, limit: int=10,
{% for column in meta %}
    {{ column.column_name }}: Optional[str] = None,
{% endfor %}
):
    with Session(engine) as session:
        return crud.get_{{ table_name }}(session,skip,limit,{% for column in meta %}{{ column.column_name }},{% endfor %})


# 新規作成
@router.post("/"+table_name+"/", response_model=model.{{ table_name }}Read)
def create_{{ table_name }}({{ table_name }}: model.{{ table_name }}Base):
    with Session(engine) as session:
        return crud.create_{{ table_name }}(session, {{ table_name }})


# 更新（PUTによる全フィールド更新）
@router.put("/"+table_name+"/{{ '{' }}{{ pkey.name }}{{ '}' }}", response_model=model.{{ table_name }}Read)
def update_{{ table_name }}({{ pkey.name }}: {{ pkey.type }}, {{ table_name }}: model.{{ table_name }}Base):
    with Session(engine) as session:
        db_{{ table_name }} = crud.get_{{ table_name }}_by_id(session,{{ pkey.name }})
        if db_{{ table_name }} is None:
            raise HTTPException(status_code=404, detail="id not found")
        return crud.update_{{ table_name }}(session,{{ table_name }},db_{{ table_name }})


# 更新（Patchによるフィールド更新）
@router.patch("/"+table_name+"/{{ '{' }}{{ pkey.name }}{{ '}' }}", response_model=model.{{ table_name }}Read)
def patch_{{ table_name }}({{ pkey.name }}: {{ pkey.type }}, {{ table_name }}: model.{{ table_name }}Patch):
    with Session(engine) as session:
        db_{{ table_name }} = crud.get_{{ table_name }}_by_id(session,{{ pkey.name }})
        if db_{{ table_name }} is None:
            raise HTTPException(status_code=404, detail="id not found")
        return crud.patch_{{ table_name }}(session,{{ table_name }},db_{{ table_name }})


# 削除
@router.delete("/"+table_name+"/{{ '{' }}{{ pkey.name }}{{ '}' }}", response_model=model.{{ table_name }}Read)
def delete_{{ table_name }}({{ pkey.name }}: {{ pkey.type }}):
    with Session(engine) as session:
        db_{{ table_name }} = crud.get_{{ table_name }}_by_id(session, {{ pkey.name }})
        if db_{{ table_name }} is None:
            raise HTTPException(status_code=404, detail="id not found")

        return crud.delete_{{ table_name }}(session, db_{{ table_name }})

