user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        access_log  /var/log/nginx/host.access.log  main;
        root   /var/www/html;

        auth_request_set $user   $upstream_http_x_auth_request_user;
        auth_request_set $email  $upstream_http_x_auth_request_email;
        proxy_set_header X-User  $user;
        proxy_set_header X-Email $email;

        # docker動作の場合はIngressがないので、このnginxですべてのトラフィックをプロキシする。
        location / {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;
            index  index.html;
        }

        location ~ \.php$ {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;

            # docker-composeのときはコンテナ名を指定
            fastcgi_pass   main-repo-php:9000;
            # kubernetesのときは127.0.0.1を指定
            #fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include        fastcgi_params;
            fastcgi_param  HTTP_X_USER $user;
            fastcgi_param  HTTP_X_EMAIL $email;
        }

        location ~ \.(py|pl|cgi|rb)$ {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;

            # docker-composeのときはコンテナ名を指定
            fastcgi_pass   main-repo-cgi:9999;
            # kubernetesのときは127.0.0.1を指定
            #fastcgi_pass   127.0.0.1:9999;
            fastcgi_index  index.py;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include        fastcgi_params;
            fastcgi_param  HTTP_X_USER $user;
            fastcgi_param  HTTP_X_EMAIL $email;
        }

        location /oauth2/ {
            # docker-composeのときはコンテナ名を指定
            proxy_pass       http://official-oidc:4180;
            # kubernetesのときは127.0.0.1を指定
            #proxy_pass       http://127.0.0.1:4180;
            proxy_set_header Host                    $host;
            proxy_set_header X-Real-IP               $remote_addr;
            proxy_set_header X-Scheme                $scheme;
            proxy_set_header X-Auth-Request-Redirect $request_uri;
            # or, if you are handling multiple domains:
            # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
        }

        location = /oauth2/auth {
            # docker-composeのときはコンテナ名を指定
            proxy_pass       http://official-oidc:4180;
            # kubernetesのときは127.0.0.1を指定
            #proxy_pass       http://127.0.0.1:4180;
            proxy_set_header Host             $host;
            proxy_set_header X-Real-IP        $remote_addr;
            proxy_set_header X-Scheme         $scheme;
            # nginx auth_request includes headers but not body
            proxy_set_header Content-Length   "";
            proxy_pass_request_body           off;
        }


        # FastAPIのパスへのトラフィックはここで fastapi-repo コンテナへ向ける
        # k8sの場合はIngressが前段にいるため、そもそもここに来ない
        location /api/fastapiapp {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;

            # docker-composeのときはコンテナ名を指定
            proxy_pass   http://fastapi-repo:8000;
            # kubernetesのときは127.0.0.1を指定
            #proxy_pass   http://127.0.0.1:8000;
        }


        # uwsgiのパスへのトラフィックはここで uwsgi-repo コンテナへ向ける
        # emperorモードで動作しており、アプリごとにhttpが待ち受けている
        # k8sでは別Deployment間のボリューム共有が難しいためUnixソケットが使えない
        # k8sの場合はIngressが前段にいるため、そもそもここに来ない
        location ~ /uwsgi/bottle-sample-01 {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;
            proxy_pass   http://uwsgi-repo:2001;
        }
        location ~ /uwsgi/bottle-sample-02 {
            auth_request /oauth2/auth;
            error_page 401 = /oauth2/sign_in;
            proxy_pass   http://uwsgi-repo:2002;
        }


        location /stub_status {
            stub_status on;
        }
    }

}
